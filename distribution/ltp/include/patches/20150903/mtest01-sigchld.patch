commit ba607821c508573ee36749f7c1bc9802bf6ee337
Author: jvohanka <jvohanka@redhat.com>
Date:   Wed Nov 18 14:39:21 2015 +0100

    mtest01: fail if a child unexpectedly terminates
    
    mtest01 checks that a specified amount of memory could be allocated.
    The memory allocation is performed by several child processes. Each
    child allocates certain amount of memory and then sends SIGRTMIN to
    the parent. The parent waits until it receives SIGRTMIN from all child
    processes or until the amount of free memory is decreased by at least
    the amount it tasked the children to allocate.
    
    The problem is that in certain situations the child process gets killed
    by oom-killer. The parent never receives SIGRTMIN from that process and
    there is not sufficient decrease in the amount of free memory, so
    the parent keeps waiting indefinitely.
    
    This patch fixes the above issue. It modifies the test in such a way that
    it also waits for SIGCHLD signal (which is sent when the oom-killer
    terminates the child process). If SIGCHLD is received the test FAILS.
    
    Signed-off-by: Jiri Vohanka <jvohanka@redhat.com>
    Signed-off-by: Jan Stancek <jstancek@redhat.com>

diff --git a/testcases/kernel/mem/mtest01/mtest01.c b/testcases/kernel/mem/mtest01/mtest01.c
index 8c9e81c93d90..5fe4adc25c88 100644
--- a/testcases/kernel/mem/mtest01/mtest01.c
+++ b/testcases/kernel/mem/mtest01/mtest01.c
@@ -50,10 +50,13 @@
 
 char *TCID = "mtest01";
 int TST_TOTAL = 1;
-int pid_count = 0;
+static sig_atomic_t pid_count;
+static sig_atomic_t sigchld_count;
 
-void handler(int signo)
+static void handler(int signo)
 {
+	if (signo == SIGCHLD)
+		sigchld_count++;
 	pid_count++;
 }
 
@@ -77,6 +80,7 @@ int main(int argc, char *argv[])
 	act.sa_flags = 0;
 	sigemptyset(&act.sa_mask);
 	sigaction(SIGRTMIN, &act, 0);
+	sigaction(SIGCHLD, &act, 0);
 
 	while ((c = getopt(argc, argv, "c:b:p:wvh")) != -1) {
 		switch (c) {
@@ -268,7 +272,7 @@ int main(int argc, char *argv[])
 
 			while ((((unsigned long long)pre_mem - post_mem) <
 				(unsigned long long)original_maxbytes) &&
-			       pid_count < pid_cntr) {
+			       pid_count < pid_cntr && !sigchld_count) {
 				sleep(1);
 				sysinfo(&sstats);
 				post_mem =
@@ -280,16 +284,21 @@ int main(int argc, char *argv[])
 				    sstats.freeswap;
 			}
 		}
-		while (pid_list[i] != 0) {
-			kill(pid_list[i], SIGKILL);
-			i++;
-		}
-		if (dowrite)
+
+		if (sigchld_count) {
+			tst_resm(TFAIL, "child process exited unexpectedly");
+		} else if (dowrite) {
 			tst_resm(TPASS, "%llu kbytes allocated and used.",
 				 original_maxbytes / 1024);
-		else
+		} else {
 			tst_resm(TPASS, "%llu kbytes allocated only.",
 				 original_maxbytes / 1024);
+		}
+
+		while (pid_list[i] != 0) {
+			kill(pid_list[i], SIGKILL);
+			i++;
+		}
 	}
 	free(pid_list);
 	tst_exit();
