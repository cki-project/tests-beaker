#!/usr/bin/env python

import os
import sys

TYPE_KEY = 1
TYPE_MAP_BEGIN = 2
TYPE_MAP_END = 3
TYPE_ENTRY = 4

def parse_line(line):
    type = TYPE_KEY
    value = None
    line = line.strip(" \t\n")
    newlen = line.find("#")
    if newlen != -1: line = line[:newlen]
    if not line: return (False, type, value)

    if line[0] == '[':
        type = TYPE_KEY
        value = line[1:]
        value = value.strip(" \t]")
    elif line[-1] == '{':
        type = TYPE_MAP_BEGIN
        value = line[:-1]
        value = value.rstrip()
    elif line[0] == '}':
        type = TYPE_MAP_END
        value = None
    else:
        type = TYPE_ENTRY
        value = line

    return (True, type, value)
        
    
STATE_INIT = 1
STATE_CHECK_KEY = 2
STATE_CHECK_KEY_DEAD = 3
STATE_CHECK_MAP = 4
STATE_CHECK_MAP_DEAD = 5
state = STATE_INIT
mapfile = None

mapdirs = dict()
exceptions = []

#check if current rpm got the key
def check_key(value):
    keys = value.split(",")
    pattern = ""
    for key in keys:
        pattern += "-e '%s' " %key
    cmd = "rpm -q --changelog autofs | grep %s 1>/dev/null 2>&1" %pattern
    return 0 == os.system(cmd)

def process_entry(value):
    global exceptions
    global mapdirs
    tmp = value.split("=")
    if len(tmp) < 2: return
    item = tmp[0].strip()
    expect = tmp[1].strip()
    tmp = expect.split(',')
    expect = int(tmp[0])
    nocheck = 0
    if len(tmp) > 1: nocheck = int(tmp[1])
    
    if not mapdirs.has_key(mapfile): return
    for i in mapdirs[mapfile]:
        exceptions.append((os.path.join(i, item), expect, nocheck))
    
#load map dirs from auto.master
def load_mapdirs(master_path):
    global mapdirs
    f = open(master_path, "r")
    for line in f.readlines():
        line = line.strip(" \t\n")
        if not line: continue
        if line[0] == '#': continue
        tmp = line.split()
        if len(tmp) < 2: continue
        path = tmp[0]
        mapfile = tmp[1]
        mapfile = os.path.basename(mapfile)
        if path == "/-": path = ""
        if not mapdirs.has_key(mapfile): mapdirs[mapfile] = []
        mapdirs[mapfile].append(path)

def process_item(type, value):
    global state
    global mapfile
    if state == STATE_INIT or state == STATE_CHECK_KEY_DEAD:
        if type == TYPE_KEY:
            if check_key(value): state = STATE_CHECK_KEY
            else: state = STATE_CHECK_KEY_DEAD
    elif state == STATE_CHECK_KEY or state == STATE_CHECK_MAP_DEAD:
        if type == TYPE_MAP_BEGIN:
            mapfile = value
            state = STATE_CHECK_MAP
        else:
            state = STATE_DEAD_KEY
    elif state == STATE_CHECK_MAP:
        if type == TYPE_ENTRY:
            process_entry(value)
        else:
            state = STATE_CHECK_MAP_DEAD

def read_exceptions(file_path):
    type = None
    value = None
    rs = False
    f = open(file_path, "r")
    while True:
        line = f.readline()
        if not line: break

        (rs, type, value) = parse_line(line)
        if not rs: continue
        process_item(type, value)

if "__main__" == __name__:
    load_mapdirs("/etc/auto.master")
    read_exceptions(sys.argv[1])
    for (path, rs, nocheck) in exceptions:
        print path
        print "%d %d" %(rs, nocheck)
