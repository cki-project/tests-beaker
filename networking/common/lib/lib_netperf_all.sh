# helper for netperf

#usage
# do_host_netperf [ipv4_local,]ipv4_remote [ipv6_local,]ipv6_remote result_file_name[,result_criteria] "other options passed to netperf"
# *** NOTE:
#    if you want this helper for both IPv4 and IPv6,
#    -L option MUST be generated by "ipv4_local,ipv4_remote" and "ipv6_local,ipv6_remote", and
#    -L option MUST NOT appear in "other options passed to netperf".
#    The code here DOES NOT check this
#
# examples:
# do_host_netperf 192.168.214.2 "" test_result.log,1000 "-l 20 -L 192.168.214.1"
# do_host_netperf "" 2001:db8:214::2 test_result.log "-l 20 -L 2001:db8:214::1"
# do_host_netperf 192.168.214.2 2001:db8:214::2 test_result.log,500 "-l 20"
# do_host_netperf 192.168.214.1,192.168.214.2 2001:db8:214::1,2001:db8:214::2 test_result.log
# do_host_netperf 192.168.214.1,192.168.214.2 2001:db8:214::1,2001:db8:214::2 test_result.log "-l 20"
# do_host_netperf 192.168.214.1,192.168.214.2 2001:db8:214::1,2001:db8:214::2 test_result.log,8000 "-l 30" ,1472
# do_host_netperf 192.168.214.1,192.168.214.2 2001:db8:214::1,2001:db8:214::2 test_result.log,8000 "" 15000,1472
do_host_netperf()
{
	local ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $3 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=$(echo $3 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')
	local udp_result_criteria=$(echo $3 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')
	local options=$4
	local tcp_msg_size=$(echo $5 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')
	local udp_msg_size=$(echo $5 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 10000" } }')
	local p_ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_STREAMv4=0
	local TCP_MAERTSv4=0
	local UDP_STREAMv4=0
	local TCP_STREAMv6=0
	local TCP_MAERTSv6=0
	local UDP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		timeout 120s bash -c "until ping -c3 $p_ipv4; do sleep 10; done"
		if [ $? -eq 0 ];then
			log=$(netperf -4 -t TCP_STREAM -H $ipv4 $options $tcp_msg_size)
			if (( $? )); then
				TCP_STREAMv4=0
			else
				TCP_STREAMv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			log=$(netperf -4 -t TCP_MAERTS -H $ipv4 $options $tcp_msg_size)
			if (( $? )); then
				TCP_MAERTSv4=0
			else
				TCP_MAERTSv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			log=$(netperf -4 -t UDP_STREAM -H $ipv4 $options $udp_msg_size)
			if (( $? )); then
				UDP_STREAMv4=0
			else
				UDP_STREAMv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			if (($(bc <<< "$TCP_STREAMv4 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv4 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv4 < $udp_result_criteria"))); then
				result=1
			fi
		else
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		timeout 120s bash -c "until ping6 -c3 $p_ipv6; do sleep 10; done"
		if [ $? -eq 0 ];then
			log=$(netperf -6 -t TCP_STREAM -H $ipv6 $options $tcp_msg_size)
			if (( $? )); then
				TCP_STREAMv6=0
			else
				TCP_STREAMv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			log=$(netperf -6 -t TCP_MAERTS -H $ipv6 $options $tcp_msg_size)
			if (( $? )); then
				TCP_MAERTSv6=0
			else
				TCP_MAERTSv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			log=$(netperf -6 -t UDP_STREAM -H $ipv6 $options $udp_msg_size)
			if (( $? )); then
				UDP_STREAMv6=0
			else
				UDP_STREAMv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			if (($(bc <<< "$TCP_STREAMv6 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv6 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv6 < $udp_result_criteria"))); then
				result=1
			fi
		else
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_STREAMv4" "TCP_MAERTSv4" "UDP_STREAMv4" "TCP_STREAMv6" "TCP_MAERTSv6" "UDP_STREAMv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" "------------" "------------" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

#usage
# do_vm_netperf vm [ipv4_local,]ipv4_remote [ipv6_local,]ipv6_remote result_file_name[,result_criteria] "other options passed to netperf"
# ** NOTE:
#   if you want this helper for both IPv4 and IPv6,
#   -L option MUST be generated by "ipv4_local,ipv4_remote" and "ipv6_local,ipv6_remote", and
#   -L option MUST NOT appear in "other options passed to netperf".
#   The code here DOES NOT check this
# example
#   see do_host_netperf as reference
do_vm_netperf()
{
	local vm=$1
	local ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $4 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=$(echo $4 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')
	local udp_result_criteria=$(echo $4 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')
	local options=$5
	local tcp_msg_size=$(echo $6 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')
	local udp_msg_size=$(echo $6 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 10000" } }')
	local p_ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_STREAMv4=0
	local TCP_MAERTSv4=0
	local UDP_STREAMv4=0
	local TCP_STREAMv6=0
	local TCP_MAERTSv6=0
	local UDP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		vmsh run_cmd $vm "timeout 120s bash -c \"until ping -c3 $p_ipv4; do sleep 10; done\""
		if [ $? -eq 0 ];then
			log=$(vmsh run_cmd $vm "netperf -4 -t TCP_STREAM -H $ipv4 $options $tcp_msg_size")
			if (( $? )); then
				TCP_STREAMv4=0
			else
				TCP_STREAMv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			log=$(vmsh run_cmd $vm "netperf -4 -t TCP_MAERTS -H $ipv4 $options $tcp_msg_size")
			if (( $? )); then
				TCP_MAERTSv4=0
			else
				TCP_MAERTSv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			log=$(vmsh run_cmd $vm "netperf -4 -t UDP_STREAM -H $ipv4 $options $udp_msg_size")
			if (( $? )); then
				UDP_STREAMv4=0
			else
				UDP_STREAMv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			if (($(bc <<< "$TCP_STREAMv4 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv4 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv4 < $udp_result_criteria"))); then
				result=1
			fi
		else
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		vmsh run_cmd $vm "timeout 120s bash -c \"until ping6 -c3 $p_ipv6; do sleep 10; done\""
		if [ $? -eq 0 ];then
			log=$(vmsh run_cmd $vm "netperf -6 -t TCP_STREAM -H $ipv6 $options $tcp_msg_size")
			if (( $? )); then
				TCP_STREAMv6=0
			else
				TCP_STREAMv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			log=$(vmsh run_cmd $vm "netperf -6 -t TCP_MAERTS -H $ipv6 $options $tcp_msg_size")
			if (( $? )); then
				TCP_MAERTSv6=0
			else
				TCP_MAERTSv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			log=$(vmsh run_cmd $vm "netperf -6 -t UDP_STREAM -H $ipv6 $options $udp_msg_size")
			if (( $? )); then
				UDP_STREAMv6=0
			else
				UDP_STREAMv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
			fi
			printf "$log\n"

			if (($(bc <<< "$TCP_STREAMv6 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv6 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv6 < $udp_result_criteria"))); then
				result=1
			fi
		else
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_STREAMv4" "TCP_MAERTSv4" "UDP_STREAMv4" "TCP_STREAMv6" "TCP_MAERTSv6" "UDP_STREAMv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" "------------" "------------" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

do_vm_ssh_netperf()
{
	local vm=$1
	local ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $4 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=$(echo $4 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')
	local udp_result_criteria=$(echo $4 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')
	local options=$5
	local tcp_msg_size=$(echo $6 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')
	local udp_msg_size=$(echo $6 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 10000" } }')
	local p_ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_STREAMv4=0
	local TCP_MAERTSv4=0
	local UDP_STREAMv4=0
	local TCP_STREAMv6=0
	local TCP_MAERTSv6=0
	local UDP_STREAMv6=0
	local result=0
	local log=""
	
	# IPv4
	if [ -n "$ipv4" ]; then
		vmsh ssh_run_cmd $vm "timeout 120s bash -c \"until ping -c3 $p_ipv4; do sleep 10; done\""
		log=$(vmsh ssh_run_cmd $vm "netperf -4 -t TCP_STREAM -H $ipv4 $options $tcp_msg_size")
		if (( $? )); then
			TCP_STREAMv4=0
		else
			TCP_STREAMv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(vmsh ssh_run_cmd $vm "netperf -4 -t TCP_MAERTS -H $ipv4 $options $tcp_msg_size")
		if (( $? )); then
			TCP_MAERTSv4=0
		else
			TCP_MAERTSv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(vmsh ssh_run_cmd $vm "netperf -4 -t UDP_STREAM -H $ipv4 $options $udp_msg_size")
		if (( $? )); then
			UDP_STREAMv4=0
		else
			UDP_STREAMv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv4 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv4 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv4 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		vmsh ssh_run_cmd $vm "timeout 120s bash -c \"until ping6 -c3 $p_ipv6; do sleep 10; done\""
		log=$(vmsh ssh_run_cmd $vm "netperf -6 -t TCP_STREAM -H $ipv6 $options $tcp_msg_size")
		if (( $? )); then
			TCP_STREAMv6=0
		else
			TCP_STREAMv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(vmsh ssh_run_cmd $vm "netperf -6 -t TCP_MAERTS -H $ipv6 $options $tcp_msg_size")
		if (( $? )); then
			TCP_MAERTSv6=0
		else
			TCP_MAERTSv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(vmsh ssh_run_cmd $vm "netperf -6 -t UDP_STREAM -H $ipv6 $options $udp_msg_size")
		if (( $? )); then
			UDP_STREAMv6=0
		else
			UDP_STREAMv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv6 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv6 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv6 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_STREAMv4" "TCP_MAERTSv4" "UDP_STREAMv4" "TCP_STREAMv6" "TCP_MAERTSv6" "UDP_STREAMv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" "------------" "------------" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

log_header()
{
	local test_name=$1
	local result_file=$2

	printf "||----------------------------------------------------------------------------------------------------------||\n" >> $result_file
	printf "|| $test_name\n" >> $result_file
	printf "||----------------------------------------------------------------------------------------------------------||\n" >> $result_file
}

#usage
# do_ns_netperf ns [ipv4_local,]ipv4_remote [ipv6_local,]ipv6_remote result_file_name[,result_criteria] "other options passed to netperf"
# ** NOTE:
#   if you want this helper for both IPv4 and IPv6,
#   -L option MUST be generated by "ipv4_local,ipv4_remote" and "ipv6_local,ipv6_remote", and
#   -L option MUST NOT appear in "other options passed to netperf".
#   The code here DOES NOT check this
# example
#   see do_host_netperf as reference
do_ns_netperf()
{
	local ns=$1
	local ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $4 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=$(echo $4 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')
	local udp_result_criteria=$(echo $4 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')
	local options=$5
	local tcp_msg_size=$(echo $6 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')
	local udp_msg_size=$(echo $6 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 10000" } }')
	local p_ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_STREAMv4=0
	local TCP_MAERTSv4=0
	local UDP_STREAMv4=0
	local TCP_STREAMv6=0
	local TCP_MAERTSv6=0
	local UDP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		ip netns exec $ns timeout 120s bash -c "until ping -c3 $p_ipv4; do sleep 10; done"
		log=$(ip netns exec $ns netperf -4 -t TCP_STREAM -H $ipv4 $options $tcp_msg_size)
		if (( $? )); then
			TCP_STREAMv4=0
		else
			TCP_STREAMv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(ip netns exec $ns netperf -4 -t TCP_MAERTS -H $ipv4 $options $tcp_msg_size)
		if (( $? )); then
			TCP_MAERTSv4=0
		else
			TCP_MAERTSv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(ip netns exec $ns netperf -4 -t UDP_STREAM -H $ipv4 $options $udp_msg_size)
		if (( $? )); then
			UDP_STREAMv4=0
		else
			UDP_STREAMv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv4 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv4 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv4 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		ip netns exec $ns timeout 120s bash -c "until ping6 -c3 $p_ipv6; do sleep 10; done"
		log=$(ip netns exec $ns netperf -6 -t TCP_STREAM -H $ipv6 $options $tcp_msg_size)
		if (( $? )); then
			TCP_STREAMv6=0
		else
			TCP_STREAMv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(ip netns exec $ns netperf -6 -t TCP_MAERTS -H $ipv6 $options $tcp_msg_size)
		if (( $? )); then
			TCP_MAERTSv6=0
		else
			TCP_MAERTSv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(ip netns exec $ns netperf -6 -t UDP_STREAM -H $ipv6 $options $udp_msg_size)
		if (( $? )); then
			UDP_STREAMv6=0
		else
			UDP_STREAMv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv6 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv6 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv6 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_STREAMv4" "TCP_MAERTSv4" "UDP_STREAMv4" "TCP_STREAMv6" "TCP_MAERTSv6" "UDP_STREAMv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" "------------" "------------" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

set_affinity()
{
	local nic=$1

	for irq in `cat /proc/interrupts | grep $nic | awk -F: '{print $1}' | awk '{print $1}'`
	do
		echo 1 > /proc/irq/$irq/smp_affinity
	done
}
